# Generated by Django 5.1.6 on 2025-03-18 18:06

from django.db import migrations
from django.contrib.auth.models import User


def link_formateurs_to_users(apps, schema_editor):
    """
    Cette fonction crée une migration pour mettre à jour les relations entre formateurs et utilisateurs.
    Nous allons simplement signaler les correspondances possibles sans tenter de modifier directement les relations.
    """
    Formateur = apps.get_model('formateurs', 'Formateur')
    User = apps.get_model('auth', 'User')
    
    print("\n=== DÉTECTION DES CORRESPONDANCES FORMATEURS-UTILISATEURS ===")
    
    # Pour chaque formateur
    for formateur in Formateur.objects.all():
        # Chercher un utilisateur avec le même email
        matching_users = User.objects.filter(email=formateur.email)
        
        if matching_users.exists():
            user = matching_users.first()
            print(f"✓ Correspondance trouvée: Formateur {formateur.formateurid} ({formateur.nom} {formateur.prenom}) -> User {user.id} ({user.username})")
        else:
            print(f"✗ Aucun utilisateur trouvé avec l'email {formateur.email} pour le formateur {formateur.formateurid} ({formateur.nom} {formateur.prenom})")
    
    print("\nPour corriger ce problème, exécutez le script suivant dans un shell Django:")
    print("from django.contrib.auth.models import User")
    print("from formateurs.models import Formateur")
    print("for formateur in Formateur.objects.all():")
    print("    matching_users = User.objects.filter(email=formateur.email)")
    print("    if matching_users.exists():")
    print("        formateur.user = matching_users.first()")
    print("        formateur.save()")
    print("        print(f'Formateur {formateur.formateurid} associé à l\'utilisateur {formateur.user.id}')")


class Migration(migrations.Migration):

    dependencies = [
        ('formateurs', '0004_remove_formateur_tarif_horaire'),
    ]

    operations = [
        migrations.RunPython(link_formateurs_to_users, migrations.RunPython.noop),
    ]
